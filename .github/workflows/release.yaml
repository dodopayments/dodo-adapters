name: Release
on:
  release:
    types:
      - published

jobs:
  release-core:
    name: Release @dodopayments/core
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
      - name: Remove node modules
        run: rm -rf node_modules
      - name: Install dependencies
        run: npm install
      - name: Install dependency - Rollup
        run: npm install -D @rollup/rollup-linux-x64-gnu
      - name: Build
        run: npm run build
        working-directory: packages/core
      - name: Verify package
        run: npm pack
        working-directory: packages/core

      - name: Check if version is newer
        id: version_check_core
        working-directory: packages/core
        run: |
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view @dodopayments/core version || echo "0.0.0")
          echo "Local version: $LOCAL_VERSION"
          echo "Published version: $PUBLISHED_VERSION"
          if [ "$(printf '%s\n' "$PUBLISHED_VERSION" "$LOCAL_VERSION" | sort -V | tail -n1)" = "$LOCAL_VERSION" ] && [ "$LOCAL_VERSION" != "$PUBLISHED_VERSION" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish core to NPM
        if: steps.version_check_core.outputs.should_publish == 'true'
        run: npm publish --access public
        working-directory: packages/core
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_SECRET }}

  release-nextjs:
    name: Release @dodopayments/nextjs
    runs-on: ubuntu-latest
    needs: release-core
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
      - name: Install dependencies
        run: npm install
      - name: Install dependency - Rollup
        run: npm install -D @rollup/rollup-linux-x64-gnu
      - name: Build core (ensure up-to-date)
        run: npm run build
        working-directory: packages/core
      - name: Build
        run: npm run build
        working-directory: packages/nextjs
      - name: Verify package
        run: npm pack
        working-directory: packages/nextjs

      - name: Check if version is newer
        id: version_check_nextjs
        working-directory: packages/nextjs
        run: |
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view @dodopayments/nextjs version || echo "0.0.0")
          echo "Local version: $LOCAL_VERSION"
          echo "Published version: $PUBLISHED_VERSION"
          if [ "$(printf '%s\n' "$PUBLISHED_VERSION" "$LOCAL_VERSION" | sort -V | tail -n1)" = "$LOCAL_VERSION" ] && [ "$LOCAL_VERSION" != "$PUBLISHED_VERSION" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.version_check_nextjs.outputs.should_publish == 'true'
        run: npm publish --access public
        working-directory: packages/nextjs
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_SECRET }}

  release-betterauth:
    name: Release @dodopayments/better-auth
    runs-on: ubuntu-latest
    needs: release-core
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
      - name: Install dependencies
        run: npm install
      - name: Build core (ensure up-to-date)
        run: npm run build
        working-directory: packages/core
      - name: Build
        run: npm run build
        working-directory: packages/betterauth
      - name: Verify package
        run: npm pack
        working-directory: packages/betterauth

      - name: Check if version is newer
        id: version_check_betterauth
        working-directory: packages/betterauth
        run: |
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view @dodopayments/better-auth version || echo "0.0.0")
          echo "Local version: $LOCAL_VERSION"
          echo "Published version: $PUBLISHED_VERSION"
          if [ "$(printf '%s\n' "$PUBLISHED_VERSION" "$LOCAL_VERSION" | sort -V | tail -n1)" = "$LOCAL_VERSION" ] && [ "$LOCAL_VERSION" != "$PUBLISHED_VERSION" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.version_check_betterauth.outputs.should_publish == 'true'
        run: npm publish --access public
        working-directory: packages/betterauth
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_SECRET }}

  release-nuxt:
    name: Release @dodopayments/nuxt
    runs-on: ubuntu-latest
    needs: release-core
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
      - name: Install dependencies
        run: npm install
      - name: Install dependency - Rollup
        run: npm install -D @rollup/rollup-linux-x64-gnu
      - name: Build core (ensure up-to-date)
        run: npm run build
        working-directory: packages/core
      - name: Build
        run: npm run build
        working-directory: packages/nuxt
      - name: Verify package
        run: npm pack
        working-directory: packages/nuxt

      - name: Check if version is newer
        id: version_check_nuxt
        working-directory: packages/nuxt
        run: |
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view @dodopayments/nuxt version || echo "0.0.0")
          echo "Local version: $LOCAL_VERSION"
          echo "Published version: $PUBLISHED_VERSION"
          if [ "$(printf '%s\n' "$PUBLISHED_VERSION" "$LOCAL_VERSION" | sort -V | tail -n1)" = "$LOCAL_VERSION" ] && [ "$LOCAL_VERSION" != "$PUBLISHED_VERSION" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.version_check_nuxt.outputs.should_publish == 'true'
        run: npm publish --access public
        working-directory: packages/nuxt
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_SECRET }}

  release-express:
    name: Release @dodopayments/express
    runs-on: ubuntu-latest
    needs: release-core
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
      - name: Install dependencies
        run: npm install
      - name: Install dependency - Rollup
        run: npm install -D @rollup/rollup-linux-x64-gnu
      - name: Build core (ensure up-to-date)
        run: npm run build
        working-directory: packages/core
      - name: Build
        run: npm run build
        working-directory: packages/express
      - name: Verify package
        run: npm pack
        working-directory: packages/express

      - name: Check if version is newer
        id: version_check_express
        working-directory: packages/express
        run: |
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view @dodopayments/express version || echo "0.0.0")
          echo "Local version: $LOCAL_VERSION"
          echo "Published version: $PUBLISHED_VERSION"
          if [ "$(printf '%s\n' "$PUBLISHED_VERSION" "$LOCAL_VERSION" | sort -V | tail -n1)" = "$LOCAL_VERSION" ] && [ "$LOCAL_VERSION" != "$PUBLISHED_VERSION" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.version_check_express.outputs.should_publish == 'true'
        run: npm publish --access public
        working-directory: packages/express
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_SECRET }}

  release-astro:
    name: Release @dodopayments/astro
    runs-on: ubuntu-latest
    needs: release-core
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
      - name: Install dependencies
        run: npm install
      - name: Install dependency - Rollup
        run: npm install -D @rollup/rollup-linux-x64-gnu
      - name: Build core (ensure up-to-date)
        run: npm run build
        working-directory: packages/core
      - name: Build
        run: npm run build
        working-directory: packages/astro
      - name: Verify package
        run: npm pack
        working-directory: packages/astro

      - name: Check if version is newer
        id: version_check_astro
        working-directory: packages/astro
        run: |
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view @dodopayments/astro version || echo "0.0.0")
          echo "Local version: $LOCAL_VERSION"
          echo "Published version: $PUBLISHED_VERSION"
          if [ "$(printf '%s\n' "$PUBLISHED_VERSION" "$LOCAL_VERSION" | sort -V | tail -n1)" = "$LOCAL_VERSION" ] && [ "$LOCAL_VERSION" != "$PUBLISHED_VERSION" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.version_check_astro.outputs.should_publish == 'true'
        run: npm publish --access public
        working-directory: packages/astro
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_SECRET }}

  release-remix:
    name: Release @dodopayments/remix
    runs-on: ubuntu-latest
    needs: release-core
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
      - name: Install dependencies
        run: npm install
      - name: Install dependency - Rollup
        run: npm install -D @rollup/rollup-linux-x64-gnu
      - name: Build core (ensure up-to-date)
        run: npm run build
        working-directory: packages/core
      - name: Build
        run: npm run build
        working-directory: packages/remix
      - name: Verify package
        run: npm pack
        working-directory: packages/remix

      - name: Check if version is newer
        id: version_check_remix
        working-directory: packages/remix
        run: |
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view @dodopayments/remix version || echo "0.0.0")
          echo "Local version: $LOCAL_VERSION"
          echo "Published version: $PUBLISHED_VERSION"
          if [ "$(printf '%s\n' "$PUBLISHED_VERSION" "$LOCAL_VERSION" | sort -V | tail -n1)" = "$LOCAL_VERSION" ] && [ "$LOCAL_VERSION" != "$PUBLISHED_VERSION" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.version_check_remix.outputs.should_publish == 'true'
        run: npm publish --access public
        working-directory: packages/remix
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_SECRET }}

  release-sveltekit:
    name: Release @dodopayments/sveltekit
    runs-on: ubuntu-latest
    needs: release-core
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
      - name: Install dependencies
        run: npm install
      - name: Install dependency - Rollup
        run: npm install -D @rollup/rollup-linux-x64-gnu
      - name: Build core (ensure up-to-date)
        run: npm run build
        working-directory: packages/core
      - name: Build
        run: npm run build
        working-directory: packages/sveltekit
      - name: Verify package
        run: npm pack
        working-directory: packages/sveltekit

      - name: Check if version is newer
        id: version_check_sveltekit
        working-directory: packages/sveltekit
        run: |
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view @dodopayments/sveltekit version || echo "0.0.0")
          echo "Local version: $LOCAL_VERSION"
          echo "Published version: $PUBLISHED_VERSION"
          if [ "$(printf '%s\n' "$PUBLISHED_VERSION" "$LOCAL_VERSION" | sort -V | tail -n1)" = "$LOCAL_VERSION" ] && [ "$LOCAL_VERSION" != "$PUBLISHED_VERSION" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.version_check_sveltekit.outputs.should_publish == 'true'
        run: npm publish --access public
        working-directory: packages/sveltekit
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_SECRET }}

  release-tanstack:
    name: Release @dodopayments/tanstack
    runs-on: ubuntu-latest
    needs: release-core
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
      - name: Install dependencies
        run: npm install
      - name: Install dependency - Rollup
        run: npm install -D @rollup/rollup-linux-x64-gnu
      - name: Build core (ensure up-to-date)
        run: npm run build
        working-directory: packages/core
      - name: Build
        run: npm run build
        working-directory: packages/tanstack
      - name: Verify package
        run: npm pack
        working-directory: packages/tanstack

      - name: Check if version is newer
        id: version_check_tanstack
        working-directory: packages/tanstack
        run: |
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view @dodopayments/tanstack version || echo "0.0.0")
          echo "Local version: $LOCAL_VERSION"
          echo "Published version: $PUBLISHED_VERSION"
          if [ "$(printf '%s\n' "$PUBLISHED_VERSION" "$LOCAL_VERSION" | sort -V | tail -n1)" = "$LOCAL_VERSION" ] && [ "$LOCAL_VERSION" != "$PUBLISHED_VERSION" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.version_check_tanstack.outputs.should_publish == 'true'
        run: npm publish --access public
        working-directory: packages/tanstack
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_SECRET }}

  release-fastify:
    name: Release @dodopayments/fastify
    runs-on: ubuntu-latest
    needs: release-core
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
      - name: Install dependencies
        run: npm install
      - name: Install dependency - Rollup
        run: npm install -D @rollup/rollup-linux-x64-gnu
      - name: Build core (ensure up-to-date)
        run: npm run build
        working-directory: packages/core
      - name: Build
        run: npm run build
        working-directory: packages/fastify
      - name: Verify package
        run: npm pack
        working-directory: packages/fastify

      - name: Check if version is newer
        id: version_check_fastify
        working-directory: packages/fastify
        run: |
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view @dodopayments/fastify version || echo "0.0.0")
          echo "Local version: $LOCAL_VERSION"
          echo "Published version: $PUBLISHED_VERSION"
          if [ "$(printf '%s\n' "$PUBLISHED_VERSION" "$LOCAL_VERSION" | sort -V | tail -n1)" = "$LOCAL_VERSION" ] && [ "$LOCAL_VERSION" != "$PUBLISHED_VERSION" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.version_check_fastify.outputs.should_publish == 'true'
        run: npm publish --access public
        working-directory: packages/fastify
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_SECRET }}

  release-hono:
    name: Release @dodopayments/hono
    runs-on: ubuntu-latest
    needs: release-core
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
      - name: Install dependencies
        run: npm install
      - name: Install dependency - Rollup
        run: npm install -D @rollup/rollup-linux-x64-gnu
      - name: Build core (ensure up-to-date)
        run: npm run build
        working-directory: packages/core
      - name: Build
        run: npm run build
        working-directory: packages/hono
      - name: Verify package
        run: npm pack
        working-directory: packages/hono

      - name: Check if version is newer
        id: version_check_hono
        working-directory: packages/hono
        run: |
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view @dodopayments/hono version || echo "0.0.0")
          echo "Local version: $LOCAL_VERSION"
          echo "Published version: $PUBLISHED_VERSION"
          if [ "$(printf '%s\n' "$PUBLISHED_VERSION" "$LOCAL_VERSION" | sort -V | tail -n1)" = "$LOCAL_VERSION" ] && [ "$LOCAL_VERSION" != "$PUBLISHED_VERSION" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.version_check_hono.outputs.should_publish == 'true'
        run: npm publish --access public
        working-directory: packages/hono
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_SECRET }}
    
  release-convex:
    name: Release @dodopayments/convex
    runs-on: ubuntu-latest
    needs: release-core
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
      - name: Install dependencies
        run: npm install
      - name: Install dependency - Rollup
        run: npm install -D @rollup/rollup-linux-x64-gnu
      - name: Build core (ensure up-to-date)
        run: npm run build
        working-directory: packages/core
      - name: Build
        run: npm run build
        working-directory: packages/convex
      - name: Verify package
        run: npm pack
        working-directory: packages/convex

      - name: Check if version is newer
        id: version_check_convex
        working-directory: packages/convex
        run: |
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view @dodopayments/convex version || echo "0.0.0")
          echo "Local version: $LOCAL_VERSION"
          echo "Published version: $PUBLISHED_VERSION"
          if [ "$(printf '%s\n' "$PUBLISHED_VERSION" "$LOCAL_VERSION" | sort -V | tail -n1)" = "$LOCAL_VERSION" ] && [ "$LOCAL_VERSION" != "$PUBLISHED_VERSION" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.version_check_convex.outputs.should_publish == 'true'
        run: npm publish --access public
        working-directory: packages/convex
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_SECRET }}
